# =================================================================
# 企业级 Node.js + Express + MySQL 后端API框架 Docker Compose配置
# =================================================================
# 完整的开发和生产环境容器编排

version: '3.8'

services:
  # Node.js应用服务
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: express-api-app
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=express_api_db
      - DB_USER=api_user
      - DB_PASSWORD=api_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./temp:/app/temp
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - api-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MySQL数据库服务
  mysql:
    image: mysql:8.0
    container_name: express-api-mysql
    restart: unless-stopped
    ports:
      - '3306:3306'
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=express_api_db
      - MYSQL_USER=api_user
      - MYSQL_PASSWORD=api_password
      - MYSQL_CHARSET=utf8mb4
      - MYSQL_COLLATION=utf8mb4_unicode_ci
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/init-database.sql:/docker-entrypoint-initdb.d/init-database.sql
      - ./mysql/conf.d:/etc/mysql/conf.d
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --max_connections=1000
      --innodb_buffer_pool_size=256M
      --innodb_log_file_size=64M
      --slow_query_log=1
      --slow_query_log_file=/var/log/mysql/slow.log
      --long_query_time=2
    networks:
      - api-network
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-proot_password']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: express-api-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - api-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Nginx反向代理服务
  nginx:
    image: nginx:alpine
    container_name: express-api-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./uploads:/usr/share/nginx/html/uploads
    depends_on:
      - app
    networks:
      - api-network

  # phpMyAdmin数据库管理
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: express-api-phpmyadmin
    restart: unless-stopped
    ports:
      - '8080:80'
    environment:
      - PMA_HOST=mysql
      - PMA_PORT=3306
      - PMA_USER=root
      - PMA_PASSWORD=root_password
    depends_on:
      - mysql
    networks:
      - api-network

  # Redis Commander缓存管理
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: express-api-redis-commander
    restart: unless-stopped
    ports:
      - '8081:8081'
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - api-network

# 数据卷配置
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

# 网络配置
networks:
  api-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 