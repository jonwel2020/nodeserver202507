---
alwaysApply: true
---
# 🚀 Node.js + Express + MySQL 企业级后端API脚手架框架开发提示词

请帮我生成一个完整的企业级 Node.js + Express + MySQL 后端API服务框架，这个框架将为小程序端和后台管理端提供数据支持，其他项目只需在此基础上开发业务功能模块即可。

## 🎯 项目基本信息
- **项目名称**: express-api-framework
- **技术栈**: Node.js + Express + MySQL + Redis + JWT
- **架构模式**: MVC + 三层架构 (Controller → Service → Repository)
- **代码风格**: 统一使用中文注释，遵循企业级开发规范
- **核心特色**: 双端完全隔离架构，支持小程序端和管理端

## 📁 项目目录结构

```
express-api-framework/
├── src/
│   ├── config/                 # 配置文件
│   │   ├── database.js         # 数据库配置（支持读写分离）
│   │   ├── redis.js            # Redis配置
│   │   ├── logger.js           # 日志配置
│   │   └── index.js            # 统一配置导出
│   ├── controllers/            # 控制器层（处理HTTP请求/响应）
│   │   ├── base/
│   │   │   └── BaseController.js
│   │   ├── api/                # 小程序端控制器
│   │   │   ├── AuthController.js
│   │   │   └── UserController.js
│   │   └── admin/              # 管理端控制器
│   │       ├── AuthController.js
│   │       └── UserController.js
│   ├── services/               # 服务层（业务逻辑）
│   │   ├── base/
│   │   │   └── BaseService.js
│   │   ├── auth/
│   │   │   └── AuthService.js
│   │   └── users/
│   │       └── UserService.js
│   ├── repositories/           # 数据访问层（数据库操作抽象）
│   │   ├── base/
│   │   │   └── BaseRepository.js
│   │   └── users/
│   │       └── UserRepository.js
│   ├── models/                 # 数据模型定义
│   │   ├── base/
│   │   │   └── BaseModel.js
│   │   ├── User.js             # 用户模型
│   │   └── Role.js             # 角色模型
│   ├── dto/                    # 数据传输对象
│   │   ├── auth/
│   │   │   ├── LoginDto.js
│   │   │   └── RegisterDto.js
│   │   └── users/
│   │       └── UserDto.js
│   ├── validators/             # 验证器
│   │   ├── auth.js
│   │   └── user.js
│   ├── middleware/             # 中间件
│   │   ├── auth.js             # 通用认证中间件
│   │   ├── apiAuth.js          # 小程序端认证中间件
│   │   ├── adminAuth.js        # 管理端认证中间件
│   │   ├── rateLimiter.js      # 限流中间件
│   │   ├── validation.js       # 数据验证中间件
│   │   ├── errorHandler.js     # 错误处理中间件
│   │   ├── logger.js           # 日志中间件
│   │   └── cors.js             # 跨域中间件
│   ├── routes/                 # 路由定义
│   │   ├── index.js            # 主路由
│   │   ├── api/                # 小程序端路由
│   │   │   ├── index.js        # 小程序端路由聚合
│   │   │   ├── auth.js         # 小程序端认证路由
│   │   │   └── users.js        # 小程序端用户路由
│   │   └── admin/              # 管理端路由
│   │       ├── index.js        # 管理端路由聚合
│   │       ├── auth.js         # 管理端认证路由
│   │       └── users.js        # 管理端用户路由
│   ├── utils/                  # 工具函数
│   │   ├── response.js         # 统一响应格式
│   │   ├── cache.js            # 缓存工具
│   │   ├── crypto.js           # 加密工具
│   │   ├── upload.js           # 文件上传工具
│   │   ├── email.js            # 邮件发送工具
│   │   └── scheduler.js        # 定时任务工具
│   ├── constants/              # 常量定义
│   │   ├── errors.js           # 错误代码
│   │   ├── roles.js            # 角色权限定义
│   │   └── status.js           # 状态码定义
│   └── app.js                  # 应用入口
├── tests/                      # 测试文件
│   ├── unit/                   # 单元测试
│   ├── integration/            # 集成测试
│   └── fixtures/               # 测试数据
├── docs/                       # 文档
│   ├── api.md                  # API文档
│   └── deployment.md           # 部署文档
├── scripts/                    # 脚本文件
│   ├── init-database.sql       # 数据库初始化脚本
│   ├── test-database.js        # 数据库测试脚本
│   └── seed-data.js            # 测试数据脚本
├── .env.example                # 环境变量示例
├── package.json
├── server.js                   # 服务器入口文件
└── README.md
```

## 🔧 核心功能实现

### 1. 分层架构设计
- **Controller 层**：处理HTTP请求/响应，参数验证，调用Service层
- **Service 层**：业务逻辑处理，事务管理，调用Repository层
- **Repository 层**：数据访问抽象，封装数据库操作，便于测试和切换数据源
- **Model 层**：数据模型定义，关系映射，数据验证
- **DTO 层**：数据传输对象，接口输入输出规范

### 2. 基础类继承体系
- **BaseController**：统一响应格式、错误处理、参数验证、分页逻辑
- **BaseService**：通用业务逻辑、缓存管理、事务处理
- **BaseRepository**：通用CRUD操作、查询构建器、连接池管理
- **BaseModel**：通用字段（id、创建时间、更新时间、软删除）

### 3. Express.js服务器配置
- 基础中间件配置（cors, helmet, morgan, compression）
- 多环境配置支持（开发、生产、测试）
- 优雅关闭机制和进程管理
- 健康检查端点（/health）
- 系统指标监控端点（/metrics）
- 静态文件服务和文件上传

### 4. MySQL数据库集成
- 使用mysql2连接池配置
- 支持读写分离配置
- 连接池监控和自动重连
- 完整的事务支持
- 数据库迁移和种子数据
- 软删除和时间戳自动管理
- 索引优化和查询性能监控

### 5. 双端完全隔离架构（核心特色）

#### 5.1 路由隔离
- **小程序端**：`/api/*` 前缀路由
- **管理端**：`/admin/*` 前缀路由
- 完全独立的路由体系，避免混淆

#### 5.2 认证机制差异
- **小程序端认证**：
  - 24小时Token过期时间
  - 基础权限验证
  - 用户只能操作自己的数据
- **管理端认证**：
  - 2小时Token过期时间
  - 严格权限验证和操作日志记录
  - 支持IP白名单限制
  - 完整的CRUD和统计权限

#### 5.3 控制器分离
- `src/controllers/api/` - 小程序端控制器（数据权限受限）
- `src/controllers/admin/` - 管理端控制器（支持批量操作和统计）

#### 5.4 中间件分离
- `apiAuth.js` - 小程序端认证中间件
- `adminAuth.js` - 管理端认证中间件（支持IP白名单、操作日志）

## 🔒 安全特性要求

### 1. 身份认证与授权
- JWT Token认证机制（AccessToken + RefreshToken）
- 多端登录管理（小程序、后台管理、移动端）
- 基于角色的权限控制（RBAC）
- 密码加密存储（bcrypt）
- 登录失败锁定机制
- 刷新Token自动续期

### 2. 安全防护措施
- API限流保护（express-rate-limit）
- 输入验证和过滤（Joi）
- SQL注入防护（参数化查询）
- XSS防护和输出编码
- CSRF防护（双重提交Cookie）
- 安全头设置（Helmet）
- 敏感信息脱敏（日志、响应）
- 文件上传安全验证

### 3. 数据验证体系
- 请求参数验证（路径、查询、请求体）
- 数据格式和类型校验
- 业务规则验证
- 自定义验证器支持

## 🎨 API设计规范

### 1. RESTful设计原则
- **资源命名**：使用复数名词（如 `/users`、`/products`）
- **HTTP方法**：
  - GET：获取资源
  - POST：创建资源
  - PUT：完整更新资源
  - PATCH：部分更新资源
  - DELETE：删除资源

### 2. 状态码规范
- **2xx（成功）**
  - 200 OK：操作成功
  - 201 Created：创建成功
  - 204 No Content：操作成功，无返回内容
- **4xx（客户端错误）**
  - 400 Bad Request：请求参数错误
  - 401 Unauthorized：未授权（未登录）
  - 403 Forbidden：权限不足
  - 404 Not Found：资源不存在
  - 409 Conflict：资源冲突（如重复数据）
  - 422 Unprocessable Entity：请求格式正确，但语义错误
- **5xx（服务器错误）**
  - 500 Internal Server Error：服务器内部错误
  - 503 Service Unavailable：服务不可用
- **6xx（自定义业务状态码）**
  - 600 Business Error：业务逻辑错误
  - 601 Validation Error：数据验证错误
  - 602 Database Error：数据库操作错误

### 3. 统一响应格式
```javascript
// 成功响应
{
  "code": 200,
  "message": "操作成功",
  "data": { ... },
  "timestamp": "2025-01-21T10:00:00.000Z"
}

// 分页响应
{
  "code": 200,
  "message": "获取成功",
  "data": {
    "items": [ ... ],
    "pagination": {
      "total": 100,
      "total_pages": 10,
      "current_page": 1,
      "page_size": 10,
      "has_previous": false,
      "has_next": true,
      "is_first_page": true,
      "is_last_page": false
    }
  },
  "timestamp": "2025-01-21T10:00:00.000Z"
}

// 错误响应
{
  "code": 400,
  "message": "参数错误",
  "error": "详细错误信息",
  "timestamp": "2025-01-21T10:00:00.000Z"
}
```

## 📋 必须实现的API接口

### 1. 小程序端认证系统
- `POST /api/auth/register` - 用户注册
- `POST /api/auth/login` - 用户登录
- `POST /api/auth/logout` - 用户登出
- `POST /api/auth/refresh` - 刷新Token
- `GET /api/auth/profile` - 获取用户信息
- `POST /api/auth/forgot-password` - 忘记密码
- `POST /api/auth/reset-password` - 重置密码

### 2. 小程序端用户管理
#### 2.1 基础信息管理
- `GET /api/users/profile` - 获取个人信息
- `PUT /api/users/profile` - 更新个人信息
- `POST /api/users/upload-avatar` - 上传头像
- `DELETE /api/users/avatar` - 删除头像

#### 2.2 账户安全
- `PUT /api/users/change-password` - 修改密码
- `POST /api/users/bind-phone` - 绑定手机号
- `POST /api/users/verify-phone` - 验证手机号
- `PUT /api/users/update-phone` - 更新手机号
- `POST /api/users/bind-wechat` - 绑定微信
- `DELETE /api/users/unbind-wechat` - 解绑微信

#### 2.3 用户设置
- `GET /api/users/settings` - 获取用户设置
- `PUT /api/users/settings` - 更新用户设置
- `PUT /api/users/privacy-settings` - 隐私设置
- `PUT /api/users/notification-settings` - 通知设置

#### 2.4 账户状态管理
- `POST /api/users/deactivate` - 注销/停用账户
- `GET /api/users/login-history` - 登录历史记录
- `POST /api/users/feedback` - 用户反馈
- `DELETE /api/users/delete-data` - 删除个人数据（GDPR合规）

### 3. 管理端认证系统
- `POST /admin/auth/login` - 管理员登录
- `POST /admin/auth/logout` - 管理员登出
- `POST /admin/auth/refresh` - 刷新Token
- `GET /admin/auth/verify` - 身份验证

### 4. 管理端用户管理
- `GET /admin/users` - 获取用户列表（分页、搜索、排序）
- `GET /admin/users/:id` - 获取单个用户
- `POST /admin/users` - 创建用户
- `PUT /admin/users/:id` - 更新用户
- `DELETE /admin/users/:id` - 删除用户（软删除）
- `DELETE /admin/users/batch` - 批量删除用户
- `GET /admin/users/stats` - 用户统计数据

### 5. 系统管理
- `GET /api/health` - 健康检查
- `GET /admin/metrics` - 系统指标（管理端）
- `POST /admin/cache/clear` - 清除缓存（管理端）

### 6. 权限管理
- `GET /admin/roles` - 获取角色列表
- `POST /admin/roles` - 创建角色
- `PUT /admin/roles/:id` - 更新角色
- `DELETE /admin/roles/:id` - 删除角色
- `GET /admin/permissions` - 获取权限列表

## 📦 依赖包配置

### 生产依赖
```json
{
  "express": "^4.18.0",
  "mysql2": "^3.6.0",
  "redis": "^4.6.0",
  "bcryptjs": "^2.4.3",
  "jsonwebtoken": "^9.0.0",
  "joi": "^17.9.0",
  "helmet": "^7.0.0",
  "cors": "^2.8.5",
  "morgan": "^1.10.0",
  "compression": "^1.7.4",
  "express-rate-limit": "^6.8.0",
  "multer": "^1.4.5",
  "nodemailer": "^6.9.0",
  "winston": "^3.10.0",
  "winston-daily-rotate-file": "^4.7.1",
  "dotenv": "^16.3.0"
}
```

### 开发依赖
```json
{
  "nodemon": "^3.0.0",
  "jest": "^29.6.0",
  "supertest": "^6.3.0",
  "eslint": "^8.45.0",
  "prettier": "^3.0.0",
  "@types/node": "^20.4.0"
}
```

## 🔧 环境变量配置

创建完整的`.env.example`文件，包含：

```env
# 服务器配置
PORT=3000
NODE_ENV=development
API_PREFIX=/api

# 数据库配置
DB_HOST=localhost
DB_PORT=3306
DB_NAME=express_api_db
DB_USER=root
DB_PASSWORD=password
DB_CONNECTION_LIMIT=10
DB_READ_HOST=localhost  # 读库配置
DB_WRITE_HOST=localhost # 写库配置

# Redis配置
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# JWT配置（小程序端）
JWT_SECRET=your-super-secret-jwt-key
JWT_EXPIRES_IN=24h
JWT_REFRESH_SECRET=your-refresh-secret
JWT_REFRESH_EXPIRES_IN=7d

# 管理端JWT配置
ADMIN_JWT_SECRET=your-admin-secret-key
ADMIN_JWT_EXPIRES_IN=2h
ADMIN_ALLOWED_IPS=127.0.0.1,::1

# 邮件配置
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password

# 文件上传配置
UPLOAD_PATH=./uploads
MAX_FILE_SIZE=5242880
ALLOWED_FILE_TYPES=jpg,jpeg,png,gif,pdf,doc,docx

# 日志配置
LOG_LEVEL=info
LOG_FILE=./logs/app.log
LOG_MAX_SIZE=10m
LOG_MAX_FILES=5

# 限流配置
RATE_LIMIT_WINDOW=15
RATE_LIMIT_MAX_REQUESTS=100
```

## 🚀 代码实现要求

### 1. 代码规范
- **注释规范**：所有注释使用中文，使用JSDoc格式添加函数和类的文档
- **命名规范**：遵循驼峰命名法和语义化命名
- **文件命名**：使用camelCase，类名使用PascalCase
- **常量命名**：使用UPPER_SNAKE_CASE
- **数据库表名**：使用snake_case命名

### 2. 错误处理
- 全局错误处理中间件
- 自定义错误类型
- 详细的错误日志记录
- 用户友好的错误信息
- 统一的错误响应格式

### 3. 性能优化
- 数据库连接池配置
- 查询优化和索引使用
- 缓存策略实现
- 响应压缩和静态资源优化
- 避免N+1查询问题

### 4. 安全考虑
- 输入数据验证和过滤
- SQL注入防护
- XSS防护
- 敏感信息脱敏

### 5. 日志规范
- 分级日志记录（error, warn, info, debug）
- 结构化日志格式
- 请求日志包含请求ID、用户ID、IP等
- 敏感信息脱敏处理

### 6. 测试规范
- 单元测试覆盖率80%以上
- 集成测试覆盖核心API
- 测试数据使用fixtures管理
- 测试环境数据隔离

## 🏗️ 路由模块化设计

### 新功能模块添加示例（以商品管理为例）

#### 1. 创建路由文件
```javascript
// routes/admin/products.js
const express = require('express');
const router = express.Router();
const { adminAuth } = require('../../middleware/adminAuth');
const { validateProduct } = require('../../validators/product');
const productController = require('../../controllers/admin/ProductController');

// 获取商品列表
router.get('/', adminAuth, productController.getProducts);

// 获取单个商品
router.get('/:id', adminAuth, productController.getProductById);

// 创建商品
router.post('/', adminAuth, validateProduct, productController.createProduct);

// 更新商品
router.put('/:id', adminAuth, validateProduct, productController.updateProduct);

// 删除商品
router.delete('/:id', adminAuth, productController.deleteProduct);

module.exports = router;
```

#### 2. 在路由索引文件中注册
```javascript
// routes/admin/index.js
const productRoutes = require('./products');
router.use('/products', productRoutes);
```

## 📝 额外要求

### 1. 文件结构
- **每个文件都要有完整的实现**，不要只是空文件或注释
- **确保所有导入导出关系正确**
- **提供完整可运行的代码**

### 2. 数据库脚本
- 创建用户表的SQL脚本
- 初始化数据的种子脚本
- 数据库连接测试脚本

### 3. 测试支持
- 基础的测试框架配置
- 至少包含几个示例测试用例
- 测试数据库配置

### 4. 文档
- 详细的README.md文件
- API接口文档
- 部署说明文档

### 5. 开发脚本
在package.json中配置完整的scripts命令：
```json
{
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest",
    "test:watch": "jest --watch",
    "lint": "eslint src/",
    "lint:fix": "eslint src/ --fix",
    "format": "prettier --write src/",
    "db:init": "node scripts/init-database.js",
    "db:seed": "node scripts/seed-data.js"
  }
}
```

## ✨ 项目特色与优势

### 1. 双端完全隔离架构
- **完全隔离的认证机制**：小程序端和管理端使用不同的JWT密钥和过期时间
- **独立的路由体系**：`/api/*` 和 `/admin/*` 完全分离
- **差异化的权限控制**：针对不同端点的特定权限策略
- **安全性增强**：降低跨端攻击风险

### 2. 企业级架构设计
- **分层架构**：Routes → Controllers → Services → Repository 清晰分层
- **模块化设计**：按功能模块组织代码，便于维护和扩展
- **统一响应格式**：标准化的API响应，包含完整的分页信息
- **完善的状态码体系**：包含自定义业务状态码（6xx）

### 3. 开发效率优化
- **快速脚手架**：一键初始化数据库和测试数据
- **热重载开发**：nodemon支持代码变更自动重启
- **统一工具类**：bcrypt、JWT、响应格式等开箱即用
- **详细的开发文档**：包含完整的API添加示例

### 4. 生产就绪特性
- **安全防护**：Helmet、CORS、限流、参数验证等全方位保护
- **性能优化**：Redis缓存、连接池、查询优化
- **监控日志**：分级日志、错误追踪、性能监控
- **测试支持**：单元测试、集成测试、API测试框架

### 5. 可扩展性
- **插件化中间件**：易于添加新的中间件功能
- **模块化路由**：新功能模块可快速集成
- **数据库优化**：支持读写分离、软删除、索引优化
- **缓存策略**：多级缓存、分布式缓存支持

## 🎯 最终目标

生成一个完整的、可直接运行的企业级后端API服务框架，开发者只需要：

1. **运行 `npm install`** 安装依赖
2. **配置环境变量**
3. **运行数据库初始化脚本**
4. **执行 `npm run dev`** 启动服务

框架应该具备良好的可扩展性，便于快速添加新的业务模块和API接口。特别适合需要小程序端和管理端双重支持的企业级应用开发。

## 📋 初始化命令

请按照以上要求，生成完整的项目文件结构和代码实现。**确保每个文件都有完整的实现代码，而不是仅仅提供框架结构**。构建一个生产就绪的、可扩展的、安全的后端服务框架，支持快速业务开发和部署，具备完整的监控、日志、测试和文档体系。